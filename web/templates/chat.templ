package templates

import "fmt"
import "github.com/nleiva/chatgbt/backend"
import "github.com/russross/blackfriday/v2"

// markdownToHTML converts markdown text to HTML
func markdownToHTML(markdown string) string {
    extensions := blackfriday.CommonExtensions | blackfriday.AutoHeadingIDs | blackfriday.Footnotes
    renderer := blackfriday.NewHTMLRenderer(blackfriday.HTMLRendererParameters{
        Flags: blackfriday.CommonHTMLFlags | blackfriday.HrefTargetBlank,
    })
    
    html := blackfriday.Run([]byte(markdown), blackfriday.WithRenderer(renderer), blackfriday.WithExtensions(extensions))
    return string(html)
}

templ Layout(title string) {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>{ title }</title>
		<script src="https://unpkg.com/htmx.org@1.9.10"></script>
		<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet"/>
		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}
			
			body {
				font-family: "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif;
				background-color: #212121;
				color: #ececec;
				height: 100vh;
				display: flex;
				overflow: hidden;
			}
			
			/* Sidebar */
			.sidebar {
				width: 260px;
				background-color: #171717;
				border-right: 1px solid #2f2f2f;
				display: flex;
				flex-direction: column;
				transition: transform 0.3s ease;
			}
			
			.sidebar-header {
				padding: 16px;
				border-bottom: 1px solid #2f2f2f;
			}
			
			.new-chat-btn {
				width: 100%;
				padding: 12px 16px;
				background: #2f2f2f;
				border: 1px solid #4d4d4f;
				border-radius: 8px;
				color: #ececec;
				cursor: pointer;
				display: flex;
				align-items: center;
				gap: 8px;
				font-size: 14px;
				transition: background-color 0.2s;
			}
			
			.new-chat-btn:hover {
				background: #404040;
			}
			
			.conversations {
				flex: 1;
				overflow-y: auto;
				padding: 8px;
			}
			
			.conversation-item {
				padding: 12px 16px;
				margin: 2px 0;
				border-radius: 8px;
				cursor: pointer;
				color: #ececec;
				font-size: 14px;
				transition: background-color 0.2s;
				display: flex;
				align-items: center;
				gap: 8px;
			}
			
			.conversation-item:hover {
				background: #2f2f2f;
			}
			
			.conversation-item.active {
				background: #2f2f2f;
			}
			
			/* Main content */
			.main-content {
				flex: 1;
				display: flex;
				flex-direction: column;
				background-color: #212121;
			}
			
			.header {
				padding: 16px 24px;
				border-bottom: 1px solid #2f2f2f;
				display: flex;
				align-items: center;
				justify-content: space-between;
				background: #212121;
			}
			
			.header h1 {
				font-size: 20px;
				font-weight: 600;
				color: #ececec;
			}
			
			.header-controls {
				display: flex;
				gap: 8px;
			}
			
			.chat-container {
				flex: 1;
				overflow-y: auto;
				padding: 24px;
				scroll-behavior: smooth;
			}
			
			.welcome-screen {
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				height: 100%;
				text-align: center;
				gap: 24px;
			}
			
			.welcome-screen h2 {
				font-size: 32px;
				font-weight: 600;
				color: #ececec;
			}
			
			.welcome-screen p {
				font-size: 16px;
				color: #b4b4b4;
				max-width: 600px;
			}
			
			.message {
				margin-bottom: 24px;
				max-width: none;
				animation: fadeIn 0.3s ease-in;
			}
			
			@keyframes fadeIn {
				from { opacity: 0; transform: translateY(10px); }
				to { opacity: 1; transform: translateY(0); }
			}
			
			.message.user {
				background: transparent;
			}
			
			.message.assistant {
				background: #2f2f2f;
				border-radius: 12px;
				padding: 24px;
				margin: 24px 0;
			}
			
			.message-header {
				display: flex;
				align-items: center;
				gap: 12px;
				margin-bottom: 12px;
			}
			
			.avatar {
				width: 32px;
				height: 32px;
				border-radius: 50%;
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: 14px;
				font-weight: 600;
			}
			
			.avatar.user {
				background: linear-gradient(135deg, #10a37f, #1a7f64);
				color: white;
			}
			
			.avatar.assistant {
				background: linear-gradient(135deg, #ff6b6b, #ee5a52);
				color: white;
			}
			
			.message-role {
				font-weight: 600;
				font-size: 14px;
				color: #ececec;
			}
			
			.message-content {
				line-height: 1.6;
				color: #ececec;
				font-size: 16px;
			}
			
			.message.user .message-content {
				background: #2f2f2f;
				padding: 16px 20px;
				border-radius: 18px;
				max-width: 80%;
				margin-left: auto;
				border: 1px solid #4d4d4f;
			}
			
			.input-container {
				padding: 20px 24px 24px 24px;
				border-top: 1px solid #2f2f2f;
				background: #212121;
			}
			
			.input-wrapper {
				max-width: 768px;
				margin: 0 auto;
				position: relative;
			}
			
			.input-form {
				position: relative;
				background: #2f2f2f;
				border: 1px solid #4d4d4f;
				border-radius: 24px;
				overflow: hidden;
				transition: border-color 0.2s;
			}
			
			.input-form:focus-within {
				border-color: #10a37f;
				box-shadow: 0 0 0 1px #10a37f;
			}
			
			.input-field {
				width: 100%;
				padding: 16px 60px 16px 20px;
				border: none;
				background: transparent;
				color: #ececec;
				resize: none;
				min-height: 54px;
				max-height: 200px;
				font-size: 16px;
				line-height: 1.5;
				font-family: inherit;
			}
			
			.input-field:focus {
				outline: none;
			}
			
			.input-field::placeholder {
				color: #8e8ea0;
			}
			
			.send-btn {
				position: absolute;
				right: 8px;
				top: 50%;
				transform: translateY(-50%);
				width: 40px;
				height: 40px;
				background: #10a37f;
				color: white;
				border: none;
				border-radius: 50%;
				cursor: pointer;
				font-weight: 500;
				display: flex;
				align-items: center;
				justify-content: center;
				transition: all 0.2s;
			}
			
			.send-btn:hover:not(:disabled) {
				background: #0f8a6b;
				transform: translateY(-50%) scale(1.05);
			}
			
			.send-btn:disabled {
				background: #4d4d4f;
				cursor: not-allowed;
				transform: translateY(-50%);
			}
			
			.control-btn {
				padding: 8px 16px;
				background: #2f2f2f;
				color: #ececec;
				border: 1px solid #4d4d4f;
				border-radius: 8px;
				cursor: pointer;
				font-size: 14px;
				transition: all 0.2s;
				display: flex;
				align-items: center;
				gap: 8px;
			}
			
			.control-btn:hover {
				background: #404040;
				border-color: #5a5a5a;
			}
			
			.loading {
				color: #10a37f;
				font-style: italic;
				display: flex;
				align-items: center;
				gap: 8px;
			}
			
			.loading::before {
				content: "";
				width: 16px;
				height: 16px;
				border: 2px solid #4d4d4f;
				border-top: 2px solid #10a37f;
				border-radius: 50%;
				animation: spin 1s linear infinite;
			}
			
			@keyframes spin {
				0% { transform: rotate(0deg); }
				100% { transform: rotate(360deg); }
			}
			
			/* Mobile responsive */
			@media (max-width: 768px) {
				.sidebar {
					position: fixed;
					left: -260px;
					top: 0;
					height: 100vh;
					z-index: 1000;
					box-shadow: 2px 0 10px rgba(0,0,0,0.3);
				}
			
				.sidebar.open {
					transform: translateX(260px);
				}
			
				.main-content {
					width: 100%;
				}
				
				.chat-container {
					padding: 16px;
				}
				
				.input-container {
					padding: 16px;
				}
				
				.message.assistant {
					margin: 16px 0;
					padding: 16px;
				}
			}
			
			/* Scrollbar styling */
			.chat-container::-webkit-scrollbar,
			.conversations::-webkit-scrollbar {
				width: 6px;
			}
			
			.chat-container::-webkit-scrollbar-track,
			.conversations::-webkit-scrollbar-track {
				background: transparent;
			}
			
			.chat-container::-webkit-scrollbar-thumb,
			.conversations::-webkit-scrollbar-thumb {
				background: #4d4d4f;
				border-radius: 3px;
			}
			
			.chat-container::-webkit-scrollbar-thumb:hover,
			.conversations::-webkit-scrollbar-thumb:hover {
				background: #5a5a5a;
			}
			
			/* Token Stats Styling */
			.token-stats {
				margin: 8px 0 16px 0;
				padding: 0;
			}
			
			.stats-row {
				display: flex;
				gap: 16px;
				align-items: center;
				flex-wrap: wrap;
				margin-left: 44px; /* Align with message content */
			}
			
			.stat-item {
				display: flex;
				align-items: center;
				gap: 4px;
				font-size: 12px;
				color: #8e8ea0;
				background: #2a2a2a;
				padding: 4px 8px;
				border-radius: 12px;
				border: 1px solid #3a3a3a;
			}
			
			.stat-item i {
				font-size: 10px;
				width: 12px;
				text-align: center;
			}
			
			.stat-item:first-child i {
				color: #10a37f;
			}
			
			.stat-item:nth-child(2) i {
				color: #ff6b6b;
			}
			
			.stat-item:nth-child(3) i {
				color: #4ecdc4;
			}
			
			.stat-item:nth-child(4) i {
				color: #45b7d1;
			}
			
			/* Warning message styling */
			.message.warning {
				background: #2d1b1b;
				border-left: 4px solid #ff6b6b;
				padding: 12px 16px;
				margin: 8px 44px 16px 44px;
				border-radius: 8px;
				font-size: 13px;
				color: #ffb3b3;
			}
		</style>
	</head>
	<body>
		{ children... }
	</body>
	</html>
}

templ ChatPage() {
	@Layout("ChatGBT - AI Assistant") {
		<div class="sidebar">
			<div class="sidebar-header">
				<button class="new-chat-btn" hx-post="/reset" hx-target="#chat-container" hx-swap="innerHTML">
					<i class="fas fa-plus"></i>
					New Chat
				</button>
			</div>
			<div class="conversations">
				<div class="conversation-item active">
					<i class="fas fa-comment"></i>
					Current Conversation
				</div>
				<!-- Future: Add conversation history here -->
			</div>
		</div>
		
		<div class="main-content">
			<div class="header">
				<h1>ChatGBT</h1>
				<div class="header-controls">
					<button class="control-btn" onclick="showSystemPromptModal()">
						<i class="fas fa-cog"></i>
						Settings
					</button>
				</div>
			</div>
			
			<div id="chat-container" class="chat-container">
				<div class="welcome-screen">
					<h2>How can I help you today?</h2>
					<p>I'm ChatGBT, your AI assistant. Ask me anything, and I'll do my best to help you with information, analysis, creative tasks, and more.</p>
				</div>
			</div>
			
			<div class="input-container">
				<div class="input-wrapper">
					<form class="input-form" hx-post="/chat" hx-target="#chat-container" hx-swap="beforeend" hx-on::after-request="this.reset();scrollToBottom();hideWelcomeScreen();">
						<textarea 
							name="message" 
							class="input-field" 
							placeholder="Message ChatGBT..." 
							required
							rows="1"
							onkeydown="if(event.key==='Enter' && !event.shiftKey){event.preventDefault();this.form.requestSubmit();}"
							oninput="autoResize(this)"
						></textarea>
						<button type="submit" class="send-btn">
							<i class="fas fa-paper-plane"></i>
						</button>
					</form>
				</div>
			</div>
		</div>
		
		<script>
			function autoResize(textarea) {
				textarea.style.height = 'auto';
				textarea.style.height = Math.min(textarea.scrollHeight, 200) + 'px';
			}
			
			function scrollToBottom() {
				const container = document.getElementById('chat-container');
				container.scrollTop = container.scrollHeight;
			}
			
			function showSystemPromptModal() {
				alert('System prompt settings would go here');
			}
			
			// Hide welcome screen when messages are added
			function hideWelcomeScreen() {
				const welcome = document.querySelector('.welcome-screen');
				if (welcome) {
					welcome.style.display = 'none';
				}
			}
			
			// Auto-scroll to bottom when new messages arrive
			document.addEventListener('htmx:afterSwap', function(evt) {
				if (evt.target.id === 'chat-container') {
					hideWelcomeScreen();
					scrollToBottom();
				}
			});
		</script>
	}
}

templ ChatResponseComponent(userMessage, assistantMessage string, usage *backend.Usage, responseTime int64, warningMsg string) {
	<!-- User message -->
	<div class="message user">
		<div class="message-header">
			<div class="avatar user">
				<i class="fas fa-user"></i>
			</div>
			<div class="message-role">You</div>
		</div>
		<div class="message-content">{ userMessage }</div>
	</div>
	
	<!-- Assistant message -->
	<div class="message assistant">
		<div class="message-header">
			<div class="avatar assistant">
				<i class="fas fa-robot"></i>
			</div>
			<div class="message-role">ChatGBT</div>
		</div>
		<div class="message-content" data-markdown="true">
			@templ.Raw(markdownToHTML(assistantMessage))
		</div>
	</div>
	
	<!-- Token stats if available -->
	if usage != nil {
		<div class="token-stats">
			<div class="stats-row">
				<div class="stat-item">
					<i class="fas fa-clock"></i>
					<span>{ fmt.Sprintf("%dms", responseTime) }</span>
				</div>
				<div class="stat-item">
					<i class="fas fa-coins"></i>
					<span>{ fmt.Sprintf("%d tokens", usage.TotalTokens) }</span>
				</div>
				<div class="stat-item">
					<i class="fas fa-arrow-up"></i>
					<span>{ fmt.Sprintf("%d", usage.PromptTokens) }</span>
				</div>
				<div class="stat-item">
					<i class="fas fa-arrow-down"></i>
					<span>{ fmt.Sprintf("%d", usage.CompletionTokens) }</span>
				</div>
			</div>
		</div>
	}
	
	<!-- Warning message if available -->
	if warningMsg != "" {
		<div class="message warning">{ warningMsg }</div>
	}
}

templ MessageComponent(role, content string) {
	<div class={ "message", role }>
		<div class="message-header">
			<div class={ "avatar", role }>
				if role == "user" {
					<i class="fas fa-user"></i>
				} else {
					<i class="fas fa-robot"></i>
				}
			</div>
			<div class="message-role">
				if role == "user" {
					You
				} else {
					ChatGBT
				}
			</div>
		</div>
		<div class="message-content">
			if role == "assistant" {
				@templ.Raw(markdownToHTML(content))
			} else {
				{ content }
			}
		</div>
	</div>
}

templ TokenStatsComponent(promptTokens, completionTokens, totalTokens int, responseTime int64) {
	<div class="token-stats">
		<div class="stats-row">
			<div class="stat-item">
				<i class="fas fa-clock"></i>
				<span>{ fmt.Sprintf("%dms", responseTime) }</span>
			</div>
			<div class="stat-item">
				<i class="fas fa-coins"></i>
				<span>{ fmt.Sprintf("%d tokens", totalTokens) }</span>
			</div>
			<div class="stat-item">
				<i class="fas fa-arrow-up"></i>
				<span>{ fmt.Sprintf("%d", promptTokens) }</span>
			</div>
			<div class="stat-item">
				<i class="fas fa-arrow-down"></i>
				<span>{ fmt.Sprintf("%d", completionTokens) }</span>
			</div>
		</div>
	</div>
}

templ LoadingMessage() {
	<div class="message assistant">
		<div class="message-header">
			<div class="avatar assistant">
				<i class="fas fa-robot"></i>
			</div>
			<div class="message-role">ChatGBT</div>
		</div>
		<div class="message-content loading">Thinking...</div>
	</div>
}
